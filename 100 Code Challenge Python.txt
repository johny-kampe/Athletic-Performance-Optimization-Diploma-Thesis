6. https://replit.com/@appbrewery/day-1-printing-start ->  Fork repl -> type your program
7. created an account for Coding Rooms: johnkamperakis@gmail.com - A@sB!)-0M,klAFP
8. Exercise 1, we can't have the same quotes in a print, print("print('what to print')"). " and ' are identical to the compiler
but you can't have the same multiple times in a string.
9. \n = seperator, string1 + string2 = concatenation
10. Solving Exercise 2
11. input() function, it returns string values
12. Exercise 3, len(x) = counts the number of characters in a string
13. Variables in python
14. Exercise 4
15. Variable Naming
16. Day 1 Project: Band Name Generator
17. Congratulations!

18. I'm going to make a program that can calculate things
19. Primitive data types = string, integer, boolean, float. print("Hello"[0]) -> prints the first character of the string
20. Type Error, Type Checking, Type Conversion. print(type(num_char)) -> tells us the type of the variable, new_num_char = str(num_char),
float(123), float("100.70"), str(700+str(100)
21. Day 2 Exercise 1
22. Mathematical Operations in Python, PEMDAS (Parenthesis, Exponents, Multiplication, Division, Addition, Subtraction), Thonny is a good tool 
to debug and understand how things work in python
23. Day 2 Exercise 2
24. Number manipulation and F Strings, round(8/3, 2), += /= -=, F Strings -> print(f"{score} {height} {isWinning}")
25. Day 2 Exercise 3
26. Day 2 Project: Tip Calculator, {:.2f}.format(bill_per_person)
27. Congratulations! Keep going young man!

29. Control flow with if/else and conditional operators
30. Day 3 Exercise 1
31. Nested if statements and elif statements
32. Day 3 Exercise 2
33. Day 3 Exercise 3
34. Multiple If statements in succession
35. Day 3 Exercise 4
36. Logical Operators
37. Day 3 Exercise 5
38. Day 3 Project: Treasure Island, ascii.co, ''' ... ''' multiple lines of string, backslash cancels the binded words
39. Keep going!!!

40. 
41. Random module, import random, random.randint(1, 10)
42. Day 4 Exercise 1
43. Lists
44. Day 4 Exercise 2, split method,
45. IndexErrors and Nested Lists, 
46. Day 4 Exercise 3
47. Day 4 Project: Rock Paper Scissors
48. Keep coding!

49. 
50. For loop
51. Day 5 Exercise 1
52. Day 5 Exercise 2
53. for loops and range() function, for number in range(1, 10): 
54. Day 5 Exercise 3
55. Day 5 Exercise 4
56. Day 5 Final Project: Create a Password Generator, password_list.append(random.choice(letters)), random.shuffle(password_list)

57. 
58. Functions and while loops in this section
59. Defining Functions and calling them, Reeborg's World Challenge
60. The Hurdles Loop Challenge, i can write programs it's like an IDE, for n in range(6): jump()
61. Indentation in Python, tab vs space
62. While loops, Exercises
63. Exercise using While Loop
64. Exercise Variable heights
65. Escaping the maze
66. Keep practising 

67. Hangman project
68. Flow chart programming
69. Challenge 1 Pick a random word
70. Challenge 1 solution
71. Challenge 2 replacing blanks with guesses
72. Challenge 2 solution, for _ in chosen_word: -> we use _ when there is no use of a variable
73. Challenge 3 Checking if the player has won
74. Challenge 3 solution, if "_" not in display:
75. Challenge 4 keep track of the player's lives, print(f"{' '.join(display)}")
76. Challenge 4 solution
77. Challenge 5 Improving the user experience
78. Challenge 5 solution
79. Keep coding daily!

80. Functions with inputs, Caesar Cipher
81. Functions and inputs
82. Positional vs keyword arguments, greet_with("Nowhere", "John Mayeur") Positional arg or greet_with(name = "John Mayuer", location = "London") keyword arg
83. Exercise 1, Paint Area Calculator
84. Exercise 2, Prime Number
85. Exercise 3, Caesar Encrypting Algorithm, index() function
86. Exercise 4, Decryption
87. Exercise 5, Reorganising our Code
88. Exercise 6, UI improvements
89. Get motivated by remembering why i do this

90. Dictionaries and nesting, Auction project
91. Dictionary, dict={1:"One"}, dict[2]="Two", for key in dict: print(key) print(dict[key])
92. Exercise 1
93. Nesting lists in Dictionaries, travel_log = {"France": {"cities_visited":["Paris", "Lille", "Dijon"], "total_visits": 12}}
94. Exercise 2, print(order["main"][2][0])
95. Auction Program
96. Auction Program Solution
97. 

98. Functions with outputs, Project Calculator
99. Function with outputs, return result, convert f name and l name to title case, return f"{name} {lname}"
100. Multiple return values
101. Exercise 1
102. Docstrings, create a message window for our functions, after the definition of our function
insert a docstring """Take a firsst and last name and format it"""
103. Calculator part 1, operations = {"+": add, "-": subtract}
104. Print vs return
105. While loops, flags and recursion, recursion calls the function inside the same function
106. Calculator Finishing Touches and Bug
107. 

108. The Blackjack Capstone Project
109. from replit import clear, 
############### Blackjack Project #####################
from art import logo
import random as rand
from replit import clear
#Difficulty Normal ðŸ˜Ž: Use all Hints below to complete the project.
#Difficulty Hard ðŸ¤”: Use only Hints 1, 2, 3 to complete the project.
#Difficulty Extra Hard ðŸ˜­: Only use Hints 1 & 2 to complete the project.
#Difficulty Expert ðŸ¤¯: Only use Hint 1 to complete the project.

############### Our Blackjack House Rules #####################
def draw():
  res_list = []
  player = ""
  player_sum = 0

  card = rand.randint(1, 13)
  if card == 11:
    player = 'J'
    player_sum = 10
  elif card == 12:
    player = 'Q'
    player_sum = 10
  elif card == 13:
    player = 'K'
    player_sum= 10
  else:
    player = card
    player_sum = card

  res_list.append(player)
  res_list.append(player_sum)

  return res_list

def computer_play(computer_cards, computer_sum):
    results = []
    results.append(computer_cards)
    results.append(computer_sum)

    draw_results = []
    
    end_game = True
    while end_game:
        draw_results = draw()
        results[0].append(draw_results[0])
        results[1] += draw_results[1]

        if results[1] > 14:
            end_game = False
    return results

def compare(list1, list2):
    print("")

def play_round():
  clear()
  print(logo)

  ace = [1, 11]

  player1_sum = 0
  player1_cards = []
  computer_sum = 0
  computer_cards = []

  for _ in range(2):
    results = draw()
    player1_cards.append(results[0])
    player1_sum += results[1]

  end_game = True
  while end_game:
    results = draw()
    player1_cards.append(results[0])
    player1_sum += results[1]

    print(f"Your cards: {player1_cards}, current score: {player1_sum}")
    print(f"Computer's first card: {computer_cards}")
    choice = input("Type 'y' to get another card, type 'n' to pass: ")

    if choice == 'n':
        computer_play(computer_cards, computer_sum)
        end_game = False

  print(f"Your final hand: {player1_cards}, final score: {player1_sum}")
  print(f"Computer's final hand: {computer_cards}, final score: {computer_sum}")
  
end_game = True
while end_game:
  enter_game = input("Do you want to play a game of Blackjack? Type 'y' or 'n': ")

  if enter_game == 'y':
    play_round()
  elif enter_game == 'n':
    print("Your money is safe...FOR NOW!")
    end_game = False



## The deck is unlimited in size. 
## There are no jokers. 
## The Jack/Queen/King all count as 10.
## The the Ace can count as 11 or 1.
## Use the following list as the deck of cards:
## cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]
## The cards in the list have equal probability of being drawn.
## Cards are not removed from the deck as they are drawn.
## The computer is the dealer.

##################### Hints #####################

#Hint 1: Go to this website and try out the Blackjack game: 
#   https://games.washingtonpost.com/games/blackjack/
#Then try out the completed Blackjack project here: 
#   http://blackjack-final.appbrewery.repl.run

#Hint 2: Read this breakdown of program requirements: 
#   http://listmoz.com/view/6h34DJpvJBFVRlZfJvxF
#Then try to create your own flowchart for the program.

#Hint 3: Download and read this flow chart I've created: 
#   https://drive.google.com/uc?export=download&id=1rDkiHCrhaf9eX7u7yjM1qwSuyEk-rPnt

#Hint 4: Create a deal_card() function that uses the List below to *return* a random card.
#11 is the Ace.
#cards = [11, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]

#Hint 5: Deal the user and computer 2 cards each using deal_card() and append().
#user_cards = []
#computer_cards = []

#Hint 6: Create a function called calculate_score() that takes a List of cards as input 
#and returns the score. 
#Look up the sum() function to help you do this.

#Hint 7: Inside calculate_score() check for a blackjack (a hand with only 2 cards: ace + 10) and return 0 instead of the actual score. 0 will represent a blackjack in our game.

#Hint 8: Inside calculate_score() check for an 11 (ace). If the score is already over 21, remove the 11 and replace it with a 1. You might need to look up append() and remove().

#Hint 9: Call calculate_score(). If the computer or the user has a blackjack (0) or if the user's score is over 21, then the game ends.

#Hint 10: If the game has not ended, ask the user if they want to draw another card. If yes, then use the deal_card() function to add another card to the user_cards List. If no, then the game has ended.

#Hint 11: The score will need to be rechecked with every new card drawn and the checks in Hint 9 need to be repeated until the game ends.

#Hint 12: Once the user is done, it's time to let the computer play. The computer should keep drawing cards as long as it has a score less than 17.

#Hint 13: Create a function called compare() and pass in the user_score and computer_score. If the computer and user both have the same score, then it's a draw. If the computer has a blackjack (0), then the user loses. If the user has a blackjack (0), then the user wins. If the user_score is over 21, then the user loses. If the computer_score is over 21, then the computer loses. If none of the above, then the player with the highest score wins.

#Hint 14: Ask the user if they want to restart the game. If they answer yes, clear the console and start a new game of blackjack and show the logo from art.py.

