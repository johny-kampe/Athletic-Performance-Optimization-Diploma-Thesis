6. https://replit.com/@appbrewery/day-1-printing-start ->  Fork repl -> type your program
7. created an account for Coding Rooms: johnkamperakis@gmail.com - A@sB!)-0M,klAFP
8. Exercise 1, we can't have the same quotes in a print, print("print('what to print')"). " and ' are identical to the compiler
but you can't have the same multiple times in a string.
9. \n = seperator, string1 + string2 = concatenation
10. Solving Exercise 2
11. input() function, it returns string values
12. Exercise 3, len(x) = counts the number of characters in a string
13. Variables in python
14. Exercise 4
15. Variable Naming
16. Day 1 Project: Band Name Generator
17. Congratulations!

18. I'm going to make a program that can calculate things
19. Primitive data types = string, integer, boolean, float. print("Hello"[0]) -> prints the first character of the string
20. Type Error, Type Checking, Type Conversion. print(type(num_char)) -> tells us the type of the variable, new_num_char = str(num_char),
float(123), float("100.70"), str(700+str(100)
21. Day 2 Exercise 1
22. Mathematical Operations in Python, PEMDAS (Parenthesis, Exponents, Multiplication, Division, Addition, Subtraction), Thonny is a good tool 
to debug and understand how things work in python
23. Day 2 Exercise 2
24. Number manipulation and F Strings, round(8/3, 2), += /= -=, F Strings -> print(f"{score} {height} {isWinning}")
25. Day 2 Exercise 3
26. Day 2 Project: Tip Calculator, {:.2f}.format(bill_per_person)
27. Congratulations! Keep going young man!

29. Control flow with if/else and conditional operators
30. Day 3 Exercise 1
31. Nested if statements and elif statements
32. Day 3 Exercise 2
33. Day 3 Exercise 3
34. Multiple If statements in succession
35. Day 3 Exercise 4
36. Logical Operators
37. Day 3 Exercise 5
38. Day 3 Project: Treasure Island, ascii.co, ''' ... ''' multiple lines of string, backslash cancels the binded words
39. Keep going!!!

40. 
41. Random module, import random, random.randint(1, 10)
42. Day 4 Exercise 1
43. Lists
44. Day 4 Exercise 2, split method,
45. IndexErrors and Nested Lists, 
46. Day 4 Exercise 3
47. Day 4 Project: Rock Paper Scissors
48. Keep coding!

49. 
50. For loop
51. Day 5 Exercise 1
52. Day 5 Exercise 2
53. for loops and range() function, for number in range(1, 10): 
54. Day 5 Exercise 3
55. Day 5 Exercise 4
56. Day 5 Final Project: Create a Password Generator, password_list.append(random.choice(letters)), random.shuffle(password_list)

57. 
58. Functions and while loops in this section
59. Defining Functions and calling them, Reeborg's World Challenge
60. The Hurdles Loop Challenge, i can write programs it's like an IDE, for n in range(6): jump()
61. Indentation in Python, tab vs space
62. While loops, Exercises
63. Exercise using While Loop
64. Exercise Variable heights
65. Escaping the maze
66. Keep practising 

67. Hangman project
68. Flow chart programming
69. Challenge 1 Pick a random word
70. Challenge 1 solution
71. Challenge 2 replacing blanks with guesses
72. Challenge 2 solution, for _ in chosen_word: -> we use _ when there is no use of a variable
73. Challenge 3 Checking if the player has won
74. Challenge 3 solution, if "_" not in display:
75. Challenge 4 keep track of the player's lives, print(f"{' '.join(display)}")
76. Challenge 4 solution
77. Challenge 5 Improving the user experience
78. Challenge 5 solution
79. Keep coding daily!

80. Functions with inputs, Caesar Cipher
81. Functions and inputs
82. Positional vs keyword arguments, greet_with("Nowhere", "John Mayeur") Positional arg or greet_with(name = "John Mayuer", location = "London") keyword arg
83. Exercise 1, Paint Area Calculator
84. Exercise 2, Prime Number
85. Exercise 3, Caesar Encrypting Algorithm, index() function
86. Exercise 4, Decryption
87. Exercise 5, Reorganising our Code
88. Exercise 6, UI improvements
89. Get motivated by remembering why i do this

90. Dictionaries and nesting, Auction project
91. Dictionary, dict={1:"One"}, dict[2]="Two", for key in dict: print(key) print(dict[key])
92. Exercise 1
93. Nesting lists in Dictionaries, travel_log = {"France": {"cities_visited":["Paris", "Lille", "Dijon"], "total_visits": 12}}
94. Exercise 2, print(order["main"][2][0])
95. Auction Program
96. Auction Program Solution
97. 

98. Functions with outputs, Project Calculator
99. Function with outputs, return result, convert f name and l name to title case, return f"{name} {lname}"
100. Multiple return values
101. Exercise 1
102. Docstrings, create a message window for our functions, after the definition of our function
insert a docstring """Take a firsst and last name and format it"""
103. Calculator part 1, operations = {"+": add, "-": subtract}
104. Print vs return
105. While loops, flags and recursion, recursion calls the function inside the same function
106. Calculator Finishing Touches and Bug
107. 

108. The Blackjack Capstone Project
109. from replit import clear, 
110. 
111. 
112.
113.
114.
115. Keep going!! (Blackjack project.txt)

116. Local vs Global scope
117. Block scope, if game_level < 5: new_enemy = enemies[0]
118. Modify a global variable, enemies = 1 def inc_enem(): global enemies print(..)
119. Constants and global scope, every letter is uppercased
     QUIZ
120. Project: The Number Guessing Game, https://patorjk.com/software/taag/#p=display&f=Graffiti&t=Type%20Something%20
121. Project solution
122. Don't be dissaponted, keep going

123. Describe the problem 
124. Reproduce the bug
125. Play computer and evaluate each line
126. Fixing errors and watching for red underlines
127. Squash bugs with a print() statement
128. Bringin out the big gun: using a debugger
129. Final debugging tips
130. Build confidence by keep coding daily!
131. Debugging Leap Year
132. Debugging FizzBuzz
133. 

134. Higher Lower Game Project
135. Solution of Higher Lower Game Project
136. 

137. Install latest Python version
138. Download PyCharm
139. Pycharm's features
140. How to install PyCharm on Windows
141. Install PyCharm on Mac
142. Coffee Machine Project
143. Solution
144. 

145. OOP
146. How to use OOP
147. Constructin objects and accessing their attributes and methods
148. Add python packages and use PyPi
149. Modifying object attributes
     QUIZ
150. OOP Coffee Machine Project
151. 
152. Review occasionally